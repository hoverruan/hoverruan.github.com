<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Maven | 并思并行]]></title>
  <link href="http://hoverruan.github.com/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://hoverruan.github.com/"/>
  <updated>2013-06-26T11:27:00+08:00</updated>
  <id>http://hoverruan.github.com/</id>
  <author>
    <name><![CDATA[Hover Ruan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Maven Checkstyle Plugin]]></title>
    <link href="http://hoverruan.github.com/blog/2013/06/21/using-maven-checkstyle-plugin/"/>
    <updated>2013-06-21T13:11:00+08:00</updated>
    <id>http://hoverruan.github.com/blog/2013/06/21/using-maven-checkstyle-plugin</id>
    <content type="html"><![CDATA[<h2>为什么要统一代码风格？</h2>

<p>每个人都有自己喜欢的代码风格，萝卜生菜各有所爱，属于个人的喜好问题。就像穿衣打扮一样，有些人按照自己的审美观来打扮自己，
也有些人是为了凸显自己的与众不同与个性，还有些不爱收拾、怎么舒服怎么方便就怎么穿的。正是因为不同，我们的世界才是多姿多彩。</p>

<p>在你的团队里面，如果每个人写代码的时候都按照自己的个性去写，结果一定很有趣，就像一个人写的字一样，一看就知道是张三的字；
这段代码一看就是李四的杰作，根本不需要在每个文件头注明 <code>@author</code> ！</p>

<p>好吧，我并不觉得有趣，我的智商还不足以在面对不同风格的代码之间频繁切换的同时，还能集中精力去思考业务和逻辑问题，
我认为整洁的代码能够降低我的理解成本，从而用宝贵的时间去解决真正有价值的问题。</p>

<h2>编码规范与执行官</h2>

<p>有一些开发团队也认为统一的代码风格很重要，意识到必须采用一些方法来规范所有的写代码的习惯，因此整理出一份符合团队习惯的
《编码规范》，可能是以 Microsoft Word 或者 PDF 的形式放在公共的文档服务器中，也可能是在开发团队内部 Wiki 上面一个
Page，总之，这是一份指导大家如果编码的强制性的规范。</p>

<p>有了规范以后，怎样保证大家能够在日常的开发过程中严格遵守编码规范呢？这种事情靠大家自觉当然是不行的，都这么自觉的话，Team
Leader 还有什么用？那是要丢饭碗的！所以他们必须承担执行官的责任，监督大家提交的代码是否符合规范，一旦发现有不上道的，
一定要在后面抽两鞭子，丫的，有规范竟然不执行！</p>

<p>可是执行官还有别的事情要做啊，要看看有没有偷懒的、进度压得够不够紧、工作是否饱满，还有别的一堆日常规范要监督，可忙了；
而且，一个人去 Review 所有其他人的代码，这种事情还是挺累的，没办法只有降低频率，并且采取抽查的方式，这样依赖，
每个开发人员的代码在一个月能被 Review 到一次就不错了。</p>

<h2>自动化的代码风格检查</h2>

<p>其实我们的 Team Leader 还是很靠谱的，他意识到这样下去不是办法，而且我们是优秀的程序员，难道就不能写个程序来自动地对
大家的代码进行检查吗？大家每次提交代码之前，先运行一次检查程序，没问题了再提交。图灵说了，所有能通过既定的步骤解决的问题，
都可以用图灵机来解决，目前我们所用到的计算机都是图灵机。</p>

<p>幸好，<a href="http://checkstyle.sourceforge.net/">Checkstyle</a> 的作者们已经完成了这项工作，通过一个 Maven 的
<a href="http://maven.apache.org/plugins/maven-checkstyle-plugin/">Plugin</a> 可以很方便的集成到我们日常的构建过程中：</p>

<h3>Maven Checkstyle Plugin 的使用</h3>

<p>首先，在你的 <code>pom.xml</code> 里加入 <code>maven-checkstyle-plugin</code> 的配置</p>

<p>```xml
<plugin></p>

<pre><code>&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
&lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
&lt;version&gt;2.10&lt;/version&gt;
</code></pre>

<p></plugin>
```</p>

<p>修改配置，使用自定义的 Checkstyle 配置文件；其中，<code>${project.basedir}</code>是指项目的根目录：</p>

<p>```xml
<plugin></p>

<pre><code>&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
&lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
&lt;version&gt;2.10&lt;/version&gt;
&lt;configuration&gt;
    &lt;configLocation&gt;${project.basedir}/conf/checkstyle.xml&lt;/configLocation&gt;
&lt;/configuration&gt;
</code></pre>

<p></plugin>
```</p>

<p>最后，我们还需要在检查到代码风格有问题的时候，让我们的构建过程失败：</p>

<p>```xml
<plugin></p>

<pre><code>&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
&lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
&lt;version&gt;2.10&lt;/version&gt;
&lt;executions&gt;
    &lt;execution&gt;
        &lt;phase&gt;process-sources&lt;/phase&gt;
        &lt;goals&gt;
            &lt;goal&gt;check&lt;/goal&gt;
        &lt;/goals&gt;
    &lt;/execution&gt;
&lt;/executions&gt;
&lt;configuration&gt;
    &lt;failsOnError&gt;true&lt;/failsOnError&gt;
    &lt;configLocation&gt;${project.basedir}/conf/checkstyle.xml&lt;/configLocation&gt;
&lt;/configuration&gt;
</code></pre>

<p></plugin>
```</p>

<p>检查的错误信息可以直接查看生成的 <code>checkstyle-results.xml</code> 文件：</p>

<p><code>bash
$ less target/checkstyle-results.xml
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven的生命周期和默认绑定的Plugin]]></title>
    <link href="http://hoverruan.github.com/blog/2013/01/10/maven-build-lifecycle/"/>
    <updated>2013-01-10T13:01:00+08:00</updated>
    <id>http://hoverruan.github.com/blog/2013/01/10/maven-build-lifecycle</id>
    <content type="html"><![CDATA[<h2>三套构建生命周期</h2>

<p>Maven有三套独立的Lifecycle：</p>

<ul>
<li>clean阶段: 项目清理阶段</li>
<li>default阶段: 默认阶段，大部分的编译、测试、打包和部署都在这个阶段完成</li>
<li>site阶段: 发布项目网站和文档阶段</li>
</ul>


<p>每个Lifecycle还定义了按顺序执行的Phases，即从命令行指定执行的Phase，必然会先依次执行其前面的所有的Phase：</p>

<ul>
<li>如果你执行 <code>mvn clean</code> Maven实际上会依次执行 <code>pre-clean</code> 和 <code>clean</code> 两个Phase</li>
<li>如果执行 <code>mvn install</code> Maven实际上会依次执行Default阶段前面的所有的22个Phase</li>
<li>如果执行 <code>mvn clean package</code> Maven首先会依次执行Clean阶段的 <code>pre-clean</code>, <code>clean</code>，然后再依次执行Default阶段的 <code>validate</code>, <code>initialize</code>, … 一直到 <code>package</code> 等17个Phase</li>
</ul>


<p>三套Lifecycle相互独立，所以在执行 <code>mvn install</code> 的时候，是不会触发任何的Clean阶段的动作的。</p>

<p><strong> Clean阶段 </strong></p>

<ol>
<li>pre-clean</li>
<li>clean</li>
<li>post-clean</li>
</ol>


<p><strong> Default阶段 </strong></p>

<ol>
<li>validate</li>
<li>initialize</li>
<li>generate-sources</li>
<li>process-sources</li>
<li>generate-resources</li>
<li>process-resources</li>
<li>compile</li>
<li>process-classes</li>
<li>generate-test-sources</li>
<li>process-test-sources</li>
<li>generate-test-resources</li>
<li>process-test-resources</li>
<li>test-compile</li>
<li>process-test-classes</li>
<li>test</li>
<li>prepare-package</li>
<li>package</li>
<li>pre-integration-test</li>
<li>integration-test</li>
<li>post-integration-test</li>
<li>verify</li>
<li>install</li>
<li>deploy</li>
</ol>


<h3>Site阶段</h3>

<ol>
<li>pre-site</li>
<li>site</li>
<li>post-site</li>
<li>site-deploy</li>
</ol>


<h2>Lifecycle和Maven Plugin</h2>

<p>Maven的核心非常精简，除了核心的Lifecycle、Phase等过程的定义之外，所有的实际操作都是以Plugin的方式提供的。为了减少用户的配置，提高易用性，Maven在发布的时候，已经默认绑定了一些基本的plugin，可以完成大部分的编译、测试、打包和发布等操作。</p>

<p>请参考官方文档 <a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html">Introduction to the Build Lifecycle</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在本地开发中使用Tomcat Maven Plugin来简化开发工作]]></title>
    <link href="http://hoverruan.github.com/blog/2013/01/06/using-tomcat-maven-plugin-for-local-development/"/>
    <updated>2013-01-06T23:25:00+08:00</updated>
    <id>http://hoverruan.github.com/blog/2013/01/06/using-tomcat-maven-plugin-for-local-development</id>
    <content type="html"><![CDATA[<h2>手动配置Tomcat服务器</h2>

<p>在日常开发的过程中，我们经常需要配置一个本地的服务器进行本地的开发测试环境；以Tomcat服务器为例，配置的过程最少包含这样的一些步骤：</p>

<ol>
<li>下载并安装Tomcat服务器</li>
<li>在IDE中配置一个本地Tomcat的运行环境</li>
<li>用配置好的Tomcat运行环境来对项目进行开发和测试</li>
</ol>


<p>如果你的项目使用Maven来进行管理，则每次你的pom.xml文件发生修改之后，IntelliJ IDEA会重新导入项目，原来对Web项目的特殊配置就会被重置成默认值，必须重新进行配置。</p>

<h2>使用Tomcat Maven Plugin</h2>

<p>Apache Tomcat Maven Plugin允许直接运行一个Web项目，无需额外下载安装Tomcat服务器，也无需在IDE中进行额外的配置，每次只需要一个简单的Maven命令即可启动一个Tomcat服务进行开发或者调试：</p>

<p>``` xml
<plugins></p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;
    &lt;artifactId&gt;tomcat6-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.0&lt;/version&gt;
    &lt;configuration&gt;
        &lt;path&gt;/${project.build.finalName}&lt;/path&gt;
        &lt;additionalClasspathDirs&gt;
            &lt;additionalClasspathDir&gt;${project.basedir}/build/local&lt;/additionalClasspathDir&gt;
        &lt;/additionalClasspathDirs&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<p></plugins>
```
只需执行以下命令即可启动服务：</p>

<p><code>
mvn tomcat6:run
</code></p>

<p>当然，可以在IDE里面配置执行此Maven Goal，可以方便地启动或者调试。</p>
]]></content>
  </entry>
  
</feed>
